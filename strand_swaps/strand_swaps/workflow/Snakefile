
configfile: os.path.join(workflow.basedir, '../', 'config', 'config.yaml')

samples, = glob_wildcards(os.path.join(config['input'],'{sample}.gbk'))
inDir = config['input']
outDir = config['output']

allTargets = [
    expand(os.path.join(outDir,'{sample}.{suff}'), sample=samples, suff=['orfm.faa','orfm.fna','gaps.bed','orfm.bed']),
    expand(os.path.join(outDir,'{sample}.{suff}'),
        sample=samples, suff=['consec_strand.tsv','consec_frame.tsv','consec_overlap.tsv']),
    os.path.join(outDir, 'summary.consec.tsv')
]

include: 'rules/strandSwaps.smk'
include: 'rules/altStops.smk'

# Mark target rules
target_rules = []
def targetRule(fn):
    assert fn.__name__.startswith('__')
    target_rules.append(fn.__name__[2:])
    return fn

@targetRule
rule all:
    input:
        allTargets

@targetRule
rule print_targets:
    run:
        print("\nTop level rules are: \n", file=sys.stderr)
        print("* " + "\n* ".join(target_rules) + "\n\n", file=sys.stderr)
