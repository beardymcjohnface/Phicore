
configfile: os.path.join(workflow.basedir, '../', 'config', 'config.yaml')

samples, = glob_wildcards(os.path.join(config['input'],'{sample}.gbk'))

# infile = config['input']

allTargets = [
    expand('{sample}.consec_strand.tsv', sample=samples),
    expand('{sample}.consec_frame.tsv', sample=samples),
    expand('{sample}.consec_overlap.tsv', sample=samples),
]

# Mark target rules
target_rules = []
def targetRule(fn):
    assert fn.__name__.startswith('__')
    target_rules.append(fn.__name__[2:])
    return fn

@targetRule
rule all:
    input:
        allTargets

@targetRule
rule print_targets:
    run:
        print("\nTop level rules are: \n", file=sys.stderr)
        print("* " + "\n* ".join(target_rules) + "\n\n", file=sys.stderr)

rule convert_genbank:
    input:
        '{file}.gbk'
    output:
        '{file}.prot'
    params:
        script = os.path.join(workflow.basedir, 'scripts', 'genbank2sequences.py')
    conda:
        'envs/pystuff.yaml'
    shell:
        """python {params.script} -g {input} -p {output}"""

rule summarise_swaps:
    input:
        '{file}.prot'
    output:
        strnd = '{file}.consec_strand.tsv',
        frame = '{file}.consec_frame.tsv',
        ovlps = '{file}.consec_overlap.tsv'
    script:
        'scripts/summarise_swaps.py'
